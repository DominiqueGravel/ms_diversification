dRdt
dLdt = a_LA*A*L + a_LP*P*L + a_LH*H*L + a_LR*R*L - b_L*L
dLdt
dOdt = a_OP*P*O + a_OR*R*O - b_O*O
dOdt
dAdt = r_A*A + a_AA*A*A + a_AL*L*A
dAdt
dPdt = r_P*P + a_PP*P*P + a_PL*L*P + a_PO*O*P
dPdt
a_AA = - K_A^-1/A/A
a_PP = - K_P^-1/P/P
dHdt = a_HR*R*H + a_HL*L*H - b_H*H#
dRdt = a_RL*R*L + a_RO*O*R + a_RH*R*H - b_R*R#
dLdt = a_LA*A*L + a_LP*P*L + a_LH*H*L + a_LR*R*L - b_L*L#
dOdt = a_OP*P*O + a_OR*R*O - b_O*O#
dAdt = r_A*A + a_AA*A*A + a_AL*L*A#
dPdt = r_P*P + a_PP*P*P + a_PL*L*P + a_PO*O*P#
#
dHdt#
dRd#
dLdt#
dOdt#
dAdt#
dPdt
dHdt#
dRdt#
dLdt#
dOdt#
dAdt#
dPdt
a_AA*A*A
phi_A = phi_AL/e_L + A^2/K_A
phi_P = phi_PL/e_L + phi_PO/e_O + P^2/K_P
# CALCUL DU TAUX DE CROISSANCE CHEZ LES PLANTES#
r_A = phi_A/A#
r_P = phi_P/P
r_A
r_P
a_AA = - K_A^-1#
a_PP = - K_P^-1#
#
# VÉRIFICATION DES ÉQUATIONS#
dHdt = a_HR*R*H + a_HL*L*H - b_H*H#
dRdt = a_RL*R*L + a_RO*O*R + a_RH*R*H - b_R*R#
dLdt = a_LA*A*L + a_LP*P*L + a_LH*H*L + a_LR*R*L - b_L*L#
dOdt = a_OP*P*O + a_OR*R*O - b_O*O#
dAdt = r_A*A + a_AA*A*A + a_AL*L*A#
dPdt = r_P*P + a_PP*P*P + a_PL*L*P + a_PO*O*P#
#
dHdt#
dRdt#
dLdt#
dOdt#
dAdt#
dPdt
phi_AL/e_L
A^2/K_A
phi_A = phi_AL/e_L + A^2/K_A
phi_A
phi_A/A
r_A
a_AA
a_LA = phi_AL/A/L#
a_AL = - a_LA/e_L#
#
a_LP = phi_PL/P/L#
a_PL = - a_LP/e_L#
#
a_OP = phi_OP/O/P#
a_PO = -a_OP/e_O#
#
a_AA = - K_A^-1#
a_PP = - K_P^-1#
#
# VÉRIFICATION DES ÉQUATIONS#
dHdt = a_HR*R*H + a_HL*L*H - b_H*H#
dRdt = a_RL*R*L + a_RO*O*R + a_RH*R*H - b_R*R#
dLdt = a_LA*A*L + a_LP*P*L + a_LH*H*L + a_LR*R*L - b_L*L#
dOdt = a_OP*P*O + a_OR*R*O - b_O*O#
dAdt = r_A*A + a_AA*A*A + a_AL*L*A#
dPdt = r_P*P + a_PP*P*P + a_PL*L*P + a_PO*O*P#
#
dHdt#
dRdt#
dLdt#
dOdt#
dAdt#
dPdt
# BIOMASS#
H =  5		# Harfang#
R =	15		# Renard#
L = 100		# Lemmings#
O = 10000	# Oie#
A = 20000	# Arbustes#
P = 140000	# Herbacées#
#
# MORTALITÉ#
b_H = 0.3#
b_R = 0.2#
b_L = 0.1#
b_O = 0.1#
#
# EFFICACITÉ DE CONVERSION#
e_H = 0.45#
e_R = 0.45#
e_L = 0.8#
e_O = 0.6#
#
# RÉPARTITION DE LA DIÈTE#
w_RH = 0.1#
w_LH = 0.9#
w_LR = 0.7#
w_OR = 0.3#
w_AL = 0.2#
w_PL = 0.8#
#
# CAPACITÉ DE SUPPORT#
K_A = 30000#
K_P = 200000#
#
# CALCULS DES FLUX#
phi_H = b_H*H#
phi_RH = w_RH * phi_H#
phi_LH = w_LH * phi_H#
#
phi_R = b_R*R + phi_RH/e_H#
phi_LR = w_LR * phi_R#
phi_OR = w_OR * phi_R#
#
phi_L = b_L*L + phi_LR/e_R + phi_LH/e_H#
phi_AL = w_AL * phi_L#
phi_PL = w_PL * phi_L#
#
phi_O = b_O*O + phi_OR/e_R#
phi_PO = phi_O #
#
phi_A = phi_AL/e_L + A^2/K_A#
phi_P = phi_PL/e_L + phi_PO/e_O + P^2/K_P#
#
# CALCUL DU TAUX DE CROISSANCE CHEZ LES PLANTES#
r_A = phi_A/A#
r_P = phi_P/P#
#
# CALCUL DES COEFFICIENTS D'INTERACTIONS#
a_HR = phi_RH/R/H#
a_RH = - a_HR/e_H#
#
a_HL = phi_LH/L/H#
a_LH = - a_HL/e_H#
#
a_RL = phi_LR/R/L#
a_LR = - a_RL/e_R#
#
a_RO = phi_OR/O/R#
a_OR = - a_RO/e_R#
#
a_LA = phi_AL/A/L#
a_AL = - a_LA/e_L#
#
a_LP = phi_PL/P/L#
a_PL = - a_LP/e_L#
#
a_OP = phi_OP/O/P#
a_PO = -a_OP/e_O#
#
a_AA = - K_A^-1#
a_PP = - K_P^-1#
#
# VÉRIFICATION DES ÉQUATIONS#
dHdt = a_HR*R*H + a_HL*L*H - b_H*H#
dRdt = a_RL*R*L + a_RO*O*R + a_RH*R*H - b_R*R#
dLdt = a_LA*A*L + a_LP*P*L + a_LH*H*L + a_LR*R*L - b_L*L#
dOdt = a_OP*P*O + a_OR*R*O - b_O*O#
dAdt = r_A*A + a_AA*A*A + a_AL*L*A#
dPdt = r_P*P + a_PP*P*P + a_PL*L*P + a_PO*O*P#
#
dHdt#
dRdt#
dLdt#
dOdt#
dAdt#
dPdt
197.98*759.77
7200+53950+1950
7200+53950+1950/300
(7200+53950+1950)/300
(7200+53950+1950)/900
(7200+5350+1950)/900
(7200+5350+1950)/300
7200/300
7800/300
20à=6à49à=23+39+48
20+6+49+23+39+48
185*15
0.76+0.2
0.96+0.53
1.49+0.6
2.09+0.18
1.49+0.06
1.55+0.18
1.73+0.18
1.77*.19
45+45+48
138*.4041
.585216^2
.585216^2*138
47*2000
90*.3424778
106/2.925
80*13.5
######################
# Levins metapopulation model for food webs#
# Spatially explicit local dispersal#
# Spatially explicit environmental heterogeneity#
# October 2011#
# Dominique Gravel#
######################
#
##########################
# Parameters#
# L = Interaction matrix  (0: no link; 1: predator prey link, SxS dimension)#
# Optimum: specific niche optimum (vector of length S)#
# Breadth: specific niche breadth (vector of length S)#
# c: propbability of successful establishment when connected to a single patch (could be generic or species specific)#
# ei: community-independent extinction rate#
# ed: community-dependent extinction rate#
# ConMat: Connectivity matrix#
# Dest: habitat destruction vector (1 if destructed, 0 if suitable)#
# Env: vector of environmental conditions#
# p0: original spatial distribution (0: absence, 1: presence, NxS dimension)#
# nsteps: number of time steps to run the model#
# FractUpdate: fraction of cells to update each time step#
###########################
#
metaweb_model = function(L,Optimum,Breadth,c,ei,ed,ConMat,Dest,Env,pO,nsteps,FractUpdate) {#
#
	# Extra parameters#
	S = nrow(L)#
	N = nrow(ConMat)#
#
	# Primary producers#
	NPrey = apply(L,2,sum)#
	Prod = numeric(S)#
	Prod[NPrey==0]=1#
	# Initialization of the metaco#
	Presence = p0	#
	# Matrix in which we record the regional abundance over time  #
	Series = matrix(nr=ceiling(nsteps/FractUpdate),nc=S+1)#
#
	# Loop over all time steps#
	for(time in 1:ceiling(nsteps/FractUpdate)) {#
		# Calculate which cells to update#
		Update = numeric(N)#
		Update[runif(N,0,1)<FractUpdate] = 1#
		# Calculate if at least one prey is present#
	LocalPrey = Presence%*%L#
	LocalPrey[LocalPrey>0] = 1#
	LocalPrey[,Prod==1] = 1 # For primary producers#
#
	# Calculate if at least one predator is present#
	LocalPred = Presence%*%t(L)#
	LocalPred[LocalPred>0] = 1#
#
	#####################
	# Test if there is extinction#
	ExtMat = matrix(0,nr=N,nc=S)#
	randExt = matrix(runif(N*S,0,1),nr=N,nc=S)#
#
	# Calculate the extinction rate#
	NetExt = ei + LocalPred*ed#
#
	# Remove the consumers having no prey #
	NetExt[LocalPrey==0] = 1#
#
	# Perform the test#
	ExtMat[Update == 1 & Presence == 1 & randExt<NetExt] = -1#
#
	#######################
	# Test if there is colonization#
	randCol = matrix(runif(N*S,0,1),nr=N,nc=S)#
	ColMat = matrix(0,nr=N,nc=S)#
#
	# Calculate how many populations are connected to the focal patch#
	ConPop = ConMat%*%Presence#
#
	# Colonization probability depends on the amount of seeds coming to the patch and the effect of the local environment on offspring development#
	EnvMat = matrix(rep(Env,each = S),nr=N,nc=S,byrow=TRUE)#
	OptMat = matrix(rep(Optimum,each = N),nr=N,nc=S)#
	BreadthMat = matrix(rep(Breadth,each = N),nr=N,nc=S)	#
#
	LocalCol = 1-(1-c)^ConPop#
	LocalCol = LocalCol*exp(-(EnvMat-OptMat)^2/2/BreadthMat^2) #
	# Perform the test#
	ColMat[Update == 1 & Dest == 0 & Presence == 0 & LocalPrey == 1 & randCol<LocalCol] = 1#
#
	#######################
	# Apply changes#
	Presence  = Presence + ExtMat + ColMat#
#
	# Record regional occupancy#
	Series[time,]=c(time,apply(Presence,2,sum)/N)#
#
	cat(time,'\n')#
	}#
#
return(list(Presence,Series))#
#
}
################## #
# Parameters#
# C: connectance#
# S: diversity#
################## #
niche_model=function(C,S) {#
	# Niche position#
	niche = sort(runif(S,0,1))#
	# Range#
	beta = 1/(2*C)-1#
	range = rbeta(S,1,beta)*niche#
	#Centroid#
	centroid = runif(S,range/2,niche)#
	# Make the first niche a producer#
	range[which.min(niche)] = 0#
#
   	# Evaluate the matrix of links#
   	L = matrix(0,nr=S,nc=S)#
   	low = centroid - range/2#
   	high = centroid + range/2#
#
	for(i in 1:S)#
    	for(j in 1:S)#
    	  if(low[i] < niche[j] && high[i] > niche[j]) L[j,i] = 1#
  return(list(L,niche))#
}
#########################
# Function to create random geometric graphs#
# Input is the number of nodes and the threshold distance to connect nodes #
# Returns a matrix of XY coordinates and the connectivity matrix#
# October 2011#
# Dominique Gravel#
#########################
#
geograph = function(N,thresh)  {#
	X = runif(N,0,1)#
	Y = runif(N,0,1)#
	XY = cbind(X,Y)#
	distMat = as.matrix(dist(XY,method = "euclidean", upper = T, diag = T))#
	ConMat = matrix(0, nr=N,nc=N)#
	ConMat[thresh>distMat] = 1#
	diag(ConMat) = 0#
	return(list(XY,ConMat)) #
}
N = 50#
S = 25#
L = niche_model(S=S,C=0.3)[[1]]#
diag(L) = 0 # Prevent cannibalism#
c = 0.1#
ei = 0.3#
ed = 0.1#
Patches = geograph(N,0.3)#
XY = Patches[[1]]#
ConMat = Patches[[2]]#
Dest = numeric(N)#
Env = numeric(N) + 0.5#
#Env = runif(N,0,1)#
Optimum = runif(S,0,1) #
Breadth = numeric(S) + Inf#
p0 = matrix(1,N,S)#
nsteps = 100#
FractUpdate = 1
results = metaweb_model(L,Optimum,Breadth,c,ei,ed,ConMat,Dest,Env,pO,nsteps,FractUpdate)#
#
# Illustrate regional dynamics over time#
quartz(height = 5, width = 6)#
par(mar=c(5,6,2,1))#
plot(results[[2]][,1],results[[2]][,2],type = "l", xlab = "Time", ylab = "Occupancy", cex.lab = 1.5, cex.axis = 1.25,ylim=c(0,1))#
for(i in 2:S) lines(results[[2]][,1],results[[2]][,i])
# Illustrate spatial distribution of biodiversity#
quartz(height = 5, width = 6)#
par(mar=c(5,6,2,1))#
s = apply(results[[1]],1,sum)/S#
col.vec = numeric(length(s))#
RK = rank(s)#
for(i in 1:N) col.vec[i] = rainbow(N,start = 0, end = 0.7)[RK[i]]#
plot(XY[,1],XY[,2],xlab = "East - West", ylab = "South - North",cex.lab = 1.5, cex.axis = 1.25)#
ConVec = stack(as.data.frame(ConMat))[,1]#
XX = expand.grid(XY[,1],XY[,1])#
YY = expand.grid(XY[,2],XY[,2])#
XX = subset(XX,ConVec==1)#
YY = subset(YY,ConVec==1)#
arrows(x0 = XX[,1],x1=XX[,2],y0 = YY[,1], y1 = YY[,2], length = 0,lwd = 0.1)#
points(XY[,1],XY[,2],pch=21,bg=col.vec)
par(mar=c(5,6,2,1))#
s = apply(results[[1]],1,sum)/S#
col.vec = numeric(length(s))#
RK = rank(s)#
for(i in 1:N) col.vec[i] = rainbow(N,start = 0, end = 0.7)[RK[i]]#
plot(XY[,1],XY[,2],xlab = "East - West", ylab = "South - North",cex.lab = 1.5, cex.axis = 1.25)#
ConVec = stack(as.data.frame(ConMat))[,1]#
XX = expand.grid(XY[,1],XY[,1])#
YY = expand.grid(XY[,2],XY[,2])#
XX = subset(XX,ConVec==1)#
YY = subset(YY,ConVec==1)#
arrows(x0 = XX[,1],x1=XX[,2],y0 = YY[,1], y1 = YY[,2], length = 0,lwd = 0.1)#
points(XY[,1],XY[,2],pch=21,bg=col.vec)
system("top")
85140*1.1*1025
85140*1.1*1025*1.025
94000*1.1*1025*1.025
library(rootSolve)#
library(deSolve)#
#
#################################################
# Définition du modèle mathématique#
#
# Fonction qui décrit la diète sur la base de la disponibilité de la ressource#
diet_fn = function(a,w_Le,w_O,w_Li,Le,O,Li,which.model) {#
#
	# MODEL 1: sans prey switching#
	if(which.model==1) {#
		a_Le = a*w_Le#
		a_O = a*w_O#
		a_Li = a*w_Li		#
	}#
#
	# MODEL 2: avec prey switching#
	if(which.model==2) {#
		a_Le = a*w_Le*Le/(w_Le*Le + w_O*O + w_Li*Li)#
		a_O  = a*w_O/(w_Le*Le + w_O*O + w_Li*Li)#
		a_Li  = a*w_Li/(w_Le*Le + w_O*O + w_Li*Li)#
	}#
#
	return(c(a_Le,a_O,a_Li))#
#
}#
#
# Système d'équations différentielles#
model = function(Time, State, Pars) {#
	with(as.list(c(State,Pars)), {#
#
		a_Le = diet_fn(a,w_Le,w_O,w_Li,Le,O,Li,which.model)[1]#
		a_O = diet_fn(a,w_Le,w_O,w_Li,Le,O,Li,which.model)[2]#
		a_Li = diet_fn(a,w_Le,w_O,w_Li,Le,O,Li,which.model)[3]#
#
		dRdt = R*(a_Le*e_Le*Le + a_O*e_O*O + a_Li*e_Li*Li)/(1 + b*(a_Li*Li + a_Le*Le + a_O*O)) - m*R#
		dLedt = r_Le*Le - a_Le*R*Le/(1 + b*(a_Li*Li + a_Le*Le + a_O*O))#
		dOdt = r_O*O*(1-O/K_O) - a_O*R*O/(1 + b*(a_Li*Li + a_Le*Le + a_O*O))#
		dLidt = r_Li*Li*(1-Li/K_Li) - a_Li*R*Li/(1 + b*(a_Li*Li + a_Le*Le + a_O*O))	  #
#
		list(c(dRdt,dLedt,dOdt,dLidt))#
	})#
}
#########################
# PARAMÈTRES#
pars = c(a = 10, 	# Taux d'activité du prédateur#
w_Le = 0.6, 		# Préférence du prédateur pour le lemming#
w_O = 0.3,			# Préférence pour l'oie#
w_Li = 0.1, 		# Préférence pour les limicoles#
#
e_Le = 0.5, 		# Efficacité de conversion de la biomasse de lemming en prédateur#
e_O = 0.1,			# Efficacité de conversion de la biomasse d'oie en prédateur#
e_Li = 0.001, 		# Efficacité de conversion de la biomasse de limicole en prédateur#
#
b = 1, 				# Constante de saturation de la réponse fonctionnelle#
m = 0.2,			# Taux de mortalité naturelle du prédateur#
r_O = 10, 			# Taux de croissance intrinsèque des oies#
r_Li = 1, 			# Taux de croissance intrinsèque des limicoles		#
K_O = 100,			# Capacité de support des oies#
K_Li = 1, 			# Capacité de support des limicoles#
#
which.model = 1)
#########################
# Conditions de départ#
N0 = c(R = 0.01, Le = 10, O = 100, Li = 1)#
#
######################## #
# Durée de la simulation#
times = seq(0,250, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)
#########################
# PARAMÈTRES#
pars = c(a = 10, 	# Taux d'activité du prédateur#
w_Le = 0.6, 		# Préférence du prédateur pour le lemming#
w_O = 0.3,			# Préférence pour l'oie#
w_Li = 0.1, 		# Préférence pour les limicoles#
#
e_Le = 0.5, 		# Efficacité de conversion de la biomasse de lemming en prédateur#
e_O = 0.1,			# Efficacité de conversion de la biomasse d'oie en prédateur#
e_Li = 0.001, 		# Efficacité de conversion de la biomasse de limicole en prédateur#
#
b = 1, 				# Constante de saturation de la réponse fonctionnelle#
m = 0.2,			# Taux de mortalité naturelle du prédateur#
r_Le = 10			# Taux de croissance intrinsèque des lemmings#
r_O = 1, 			# Taux de croissance intrinsèque des oies#
r_Li = 0.1, 		# Taux de croissance intrinsèque des limicoles		#
K_O = 100,			# Capacité de support des oies#
K_Li = 1, 			# Capacité de support des limicoles#
#
which.model = 1)#
#########################
# Conditions de départ#
N0 = c(R = 0.01, Le = 10, O = 100, Li = 1)#
#
######################## #
# Durée de la simulation#
times = seq(0,250, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)
#########################
# PARAMÈTRES#
pars = c(a = 10, 	# Taux d'activité du prédateur#
w_Le = 0.6, 		# Préférence du prédateur pour le lemming#
w_O = 0.3,			# Préférence pour l'oie#
w_Li = 0.1, 		# Préférence pour les limicoles#
#
e_Le = 0.5, 		# Efficacité de conversion de la biomasse de lemming en prédateur#
e_O = 0.1,			# Efficacité de conversion de la biomasse d'oie en prédateur#
e_Li = 0.001, 		# Efficacité de conversion de la biomasse de limicole en prédateur#
#
b = 1, 				# Constante de saturation de la réponse fonctionnelle#
m = 0.2,			# Taux de mortalité naturelle du prédateur#
r_Le = 10,			# Taux de croissance intrinsèque des lemmings#
r_O = 1, 			# Taux de croissance intrinsèque des oies#
r_Li = 0.1, 		# Taux de croissance intrinsèque des limicoles		#
K_O = 100,			# Capacité de support des oies#
K_Li = 1, 			# Capacité de support des limicoles#
#
which.model = 1)
#########################
# PARAMÈTRES#
pars = c(a = 10, 	# Taux d'activité du prédateur#
w_Le = 0.6, 		# Préférence du prédateur pour le lemming#
w_O = 0.3,			# Préférence pour l'oie#
w_Li = 0.1, 		# Préférence pour les limicoles#
#
e_Le = 0.5, 		# Efficacité de conversion de la biomasse de lemming en prédateur#
e_O = 0.1,			# Efficacité de conversion de la biomasse d'oie en prédateur#
e_Li = 0.001, 		# Efficacité de conversion de la biomasse de limicole en prédateur#
#
b = 1, 				# Constante de saturation de la réponse fonctionnelle#
m = 0.2,			# Taux de mortalité naturelle du prédateur#
r_Le = 10,			# Taux de croissance intrinsèque des lemmings#
r_O = 1, 			# Taux de croissance intrinsèque des oies#
r_Li = 0.1, 		# Taux de croissance intrinsèque des limicoles		#
K_O = 100,			# Capacité de support des oies#
K_Li = 1, 			# Capacité de support des limicoles#
#
which.model = 1)#
#########################
# Conditions de départ#
N0 = c(R = 0.01, Le = 10, O = 100, Li = 1)#
#
######################## #
# Durée de la simulation#
times = seq(0,250, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)
out
head(out)
#########################
# PARAMÈTRES#
pars = c(a = 10, 	# Taux d'activité du prédateur#
w_Le = 0.6, 		# Préférence du prédateur pour le lemming#
w_O = 0.3,			# Préférence pour l'oie#
w_Li = 0.1, 		# Préférence pour les limicoles#
#
e_Le = 0.5, 		# Efficacité de conversion de la biomasse de lemming en prédateur#
e_O = 0.1,			# Efficacité de conversion de la biomasse d'oie en prédateur#
e_Li = 0.001, 		# Efficacité de conversion de la biomasse de limicole en prédateur#
#
b = 1, 				# Constante de saturation de la réponse fonctionnelle#
m = 0.2,			# Taux de mortalité naturelle du prédateur#
r_Le = 1,			# Taux de croissance intrinsèque des lemmings#
r_O = 0.1, 			# Taux de croissance intrinsèque des oies#
r_Li = 0.01, 		# Taux de croissance intrinsèque des limicoles		#
K_O = 100,			# Capacité de support des oies#
K_Li = 1, 			# Capacité de support des limicoles#
#
which.model = 1)#
#########################
# Conditions de départ#
N0 = c(R = 0.01, Le = 1, O = 100, Li = 1)#
#
######################## #
# Durée de la simulation#
times = seq(0,250, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)
head(out)
out
#########################
# PARAMÈTRES#
pars = c(a = 10, 	# Taux d'activité du prédateur#
w_Le = 0.6, 		# Préférence du prédateur pour le lemming#
w_O = 0.3,			# Préférence pour l'oie#
w_Li = 0.1, 		# Préférence pour les limicoles#
#
e_Le = 0.5, 		# Efficacité de conversion de la biomasse de lemming en prédateur#
e_O = 0.1,			# Efficacité de conversion de la biomasse d'oie en prédateur#
e_Li = 0.001, 		# Efficacité de conversion de la biomasse de limicole en prédateur#
#
b = 1, 				# Constante de saturation de la réponse fonctionnelle#
m = 0.2,			# Taux de mortalité naturelle du prédateur#
r_Le = 1,			# Taux de croissance intrinsèque des lemmings#
r_O = 0.1, 			# Taux de croissance intrinsèque des oies#
r_Li = 0.01, 		# Taux de croissance intrinsèque des limicoles		#
K_O = 100,			# Capacité de support des oies#
K_Li = 1, 			# Capacité de support des limicoles#
#
which.model = 2)#
#########################
# Conditions de départ#
N0 = c(R = 0.01, Le = 1, O = 100, Li = 1)#
#
######################## #
# Durée de la simulation#
times = seq(0,250, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)
out
# Système d'équations différentielles#
model = function(Time, State, Pars) {#
	with(as.list(c(State,Pars)), {#
#
		a_Le = diet_fn(a,w_Le,w_O,w_Li,Le,O,Li,which.model)[1]#
		a_O = diet_fn(a,w_Le,w_O,w_Li,Le,O,Li,which.model)[2]#
		a_Li = diet_fn(a,w_Le,w_O,w_Li,Le,O,Li,which.model)[3]#
#
		dRdt = R*(a_Le*e_Le*Le + a_O*e_O*O + a_Li*e_Li*Li)/(1 + b*(a_Li*Li + a_Le*Le + a_O*O)) - m*R#
		dLedt = r_Le*Le*(1-Le/K_Le) - a_Le*R*Le/(1 + b*(a_Li*Li + a_Le*Le + a_O*O))#
		dOdt = r_O*O*(1-O/K_O) - a_O*R*O/(1 + b*(a_Li*Li + a_Le*Le + a_O*O))#
		dLidt = r_Li*Li*(1-Li/K_Li) - a_Li*R*Li/(1 + b*(a_Li*Li + a_Le*Le + a_O*O))	  #
#
		list(c(dRdt,dLedt,dOdt,dLidt))#
	})#
}#
#########################
# PARAMÈTRES#
pars = c(a = 10, 	# Taux d'activité du prédateur#
w_Le = 0.6, 		# Préférence du prédateur pour le lemming#
w_O = 0.3,			# Préférence pour l'oie#
w_Li = 0.1, 		# Préférence pour les limicoles#
#
e_Le = 0.5, 		# Efficacité de conversion de la biomasse de lemming en prédateur#
e_O = 0.1,			# Efficacité de conversion de la biomasse d'oie en prédateur#
e_Li = 0.001, 		# Efficacité de conversion de la biomasse de limicole en prédateur#
#
b = 1, 				# Constante de saturation de la réponse fonctionnelle#
m = 0.2,			# Taux de mortalité naturelle du prédateur#
r_Le = 1,			# Taux de croissance intrinsèque des lemmings#
r_O = 0.1, 			# Taux de croissance intrinsèque des oies#
r_Li = 0.01, 		# Taux de croissance intrinsèque des limicoles		#
K_Le = 10,			# Capacité de support des lemings#
K_O = 100,			# Capacité de support des oies#
K_Li = 1, 			# Capacité de support des limicoles#
#
which.model = 1)#
#########################
# Conditions de départ#
N0 = c(R = 0.01, Le = 1, O = 100, Li = 1)#
#
######################## #
# Durée de la simulation#
times = seq(0,250, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)
out
plot(out[,1],out[,2],type = "l")
# PARAMÈTRES#
pars = c(a = 10, 	# Taux d'activité du prédateur#
w_Le = 0.6, 		# Préférence du prédateur pour le lemming#
w_O = 0.3,			# Préférence pour l'oie#
w_Li = 0.1, 		# Préférence pour les limicoles#
#
e_Le = 0.5, 		# Efficacité de conversion de la biomasse de lemming en prédateur#
e_O = 0.1,			# Efficacité de conversion de la biomasse d'oie en prédateur#
e_Li = 0.001, 		# Efficacité de conversion de la biomasse de limicole en prédateur#
#
b = 1, 				# Constante de saturation de la réponse fonctionnelle#
m = 0.1,			# Taux de mortalité naturelle du prédateur#
r_Le = 1,			# Taux de croissance intrinsèque des lemmings#
r_O = 0.1, 			# Taux de croissance intrinsèque des oies#
r_Li = 0.01, 		# Taux de croissance intrinsèque des limicoles		#
K_Le = 10,			# Capacité de support des lemings#
K_O = 100,			# Capacité de support des oies#
K_Li = 1, 			# Capacité de support des limicoles#
#
which.model = 1)#
#########################
# Conditions de départ#
N0 = c(R = 0.01, Le = 1, O = 100, Li = 1)#
#
######################## #
# Durée de la simulation#
times = seq(0,250, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
#########################
# Illustration de la sortie#
par(mar=c(6,6,2,1)) #
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5,ylim=range(out[,2:3]))
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.1)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
#########################
# Illustration de la sortie#
par(mar=c(6,6,2,1)) #
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5,ylim=range(out[,2:3]))
######################## #
# Durée de la simulation#
times = seq(0,1000, by = 0.01)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
#########################
# Illustration de la sortie#
par(mar=c(6,6,2,1)) #
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5,ylim=range(out[,2:3]))
dim(out)
out[100001,]
######################## #
# Durée de la simulation#
times = seq(0,250, by = 0.01)  #
#
#########################
# Réalisation de la simulation#
# La première colonne de l'objet out représente le temps et les autres la densité#
out = ode(func=model,y = N0, parms = pars, times = times)#
#########################
# Illustration de la sortie#
par(mar=c(6,6,2,1)) #
plot(out[,1],out[,2],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5,ylim=range(out[,2:3]))
plot(out[,1],out[,3],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5,ylim=range(out[,2:3]))
plot(out[,1],out[,4],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5,ylim=range(out[,2:3]))
plot(out[,1],out[,4],type="l",xlab = "Temps",ylab = "Densité",cex.lab = 1.75, cex.axis = 1.5)
20000/12
20000/12*8
2.2*4.333
13*15
6500/195
7500/33.33
225/13
17.5*2
13*17.5*27.55*1.2
10880/69
10880/69/24
dbeta(seq(0,1,0.1),1,1)
x = seq(0,1,0.0001)
C = 0.2
y = dbeta(x,0.1, 0.1*(1-C)/C)
plot(x,y,type = "l")
a = 0.5
y = dbeta(x,a, a*(1-C)/C)
plot(x,y,type = "l")
a = 10
y = dbeta(x,a, a*(1-C)/C)
plot(x,y,type = "l")
a = 100000
y = dbeta(x,a, a*(1-C)/C)
plot(x,y,type = "l")
a = 10
y = dbeta(x,a, a*(1-C)/C)
plot(x,y,type = "l")
?dbeta
y = pbeta(x,a, a*(1-C)/C)
plot(x,y,type = "l")
y = dbeta(x,a, a*(1-C)/C)
a = 1
y = dbeta(x,a, a*(1-C)/C)
plot(x,y,type = "l")
12/100
20000*.12*1.25
53+43+57+25+35+34+15+45+48+42+31
31+25+26+23+8+26+13+32+32+28+12
install.packages("markdown")
545/53
u  = function(u0, u1, a, I) u0 + u1*exp(-a*I)#
e1 = function(e0, b, I) e0 + (1-e0)*exp(-b*I)#
e2 = function(e1, e2, c, I) 1 - e2 - (1 - e1 - e2)*exp(-c*I)#
#
quartz(width = 5, height = 6)#
#
par(mar = c(5,6,2,1),mfrow =c(3,2))#
#
plot_model = function(u0, u1, e0, e1, e2, a, b, c, C) {#
#
	R = seq(0, 250, 1)#
	I = C*R#
	S = u(u0,u1,a,I)#
	E = e1(e0,b,I) + e2(e1,e2,c,I)#
#
	plot(R, S, type = "l", ylim = c(0,1), xlab = "Species richness", ylab = "Probability", col = "darkblue",lwd = 1.5, cex.lab = 1.25)#
	lines(R, E, col = "darkred",lwd = 1.5)#
	legend("topright",bty = "n", legend = c("Speciation", "Extinction"), col = c("darkblue","darkred"),lty = 1)#
#
	plot(R, R*(S - E), type = "l", cex.lab = 1.25, xlab = "Species richness", ylab = "Diversification rate")#
	abline(h = 0, lty = 3, lwd = 0.5)#
#
}#
#
# (-,-)#
plot_model(u0 = 0, u1 = 0.5, e0 = 0, e1 = 0.1, e2 = 0.8, a=0.1, b=Inf, c=0.1, C)#
#
# (+,-)#
plot_model(u0 = 0.6, u1 = -0.4, e0 = 0., e1 = 0, e2 = 0.1, a=0.1, b=0.5, c=0.05, C)#
#
# (+,+)#
plot_model(u0 = 0.5, u1 = -0.5, e0 = 0.2, e1 = 0, e2 = 0, a=0.1, b=0.2, c=0, C)
u  = function(u0, u1, a, I) u0 + u1*exp(-a*I)#
e1 = function(e0, b, I) e0 + (1-e0)*exp(-b*I)#
e2 = function(e1, e2, c, I) 1 - e2 - (1 - e1 - e2)*exp(-c*I)#
C = 0.1#
#
quartz(width = 5, height = 6)#
#
par(mar = c(5,6,2,1),mfrow =c(3,2))#
#
plot_model = function(u0, u1, e0, e1, e2, a, b, c, C) {#
#
	R = seq(0, 250, 1)#
	I = C*R#
	S = u(u0,u1,a,I)#
	E = e1(e0,b,I) + e2(e1,e2,c,I)#
#
	plot(R, S, type = "l", ylim = c(0,1), xlab = "Species richness", ylab = "Probability", col = "darkblue",lwd = 1.5, cex.lab = 1.25)#
	lines(R, E, col = "darkred",lwd = 1.5)#
	legend("topright",bty = "n", legend = c("Speciation", "Extinction"), col = c("darkblue","darkred"),lty = 1)#
#
	plot(R, R*(S - E), type = "l", cex.lab = 1.25, xlab = "Species richness", ylab = "Diversification rate")#
	abline(h = 0, lty = 3, lwd = 0.5)#
#
}#
#
# (-,-)#
plot_model(u0 = 0, u1 = 0.5, e0 = 0, e1 = 0.1, e2 = 0.8, a=0.1, b=Inf, c=0.1, C = 0.1)#
#
# (+,-)#
plot_model(u0 = 0.6, u1 = -0.4, e0 = 0., e1 = 0, e2 = 0.1, a=0.1, b=0.5, c=0.05, C= 0.1)#
#
# (+,+)#
plot_model(u0 = 0.5, u1 = -0.5, e0 = 0.2, e1 = 0, e2 = 0, a=0.1, b=0.2, c=0, C = 0.1)
105/2.49
45.6*2.49
37*625*0.1
install.packages("binom")
local({r <-getOption("repos")#
       r["CRAN"] <- "http://cran.cardse.net/"#
       options(repos = r)#
 })
install.packages("binom")
1000*4
1000*4/11.66
1000*4/11.66*45
1000*4/11.66*50
.8*250000
.8*250000-157000
4111-411
98562/94303
1.045163*95819
175/2.2
load("res_niche.rojb")
load("res_niche.robj")
ls()
names(out)
dim(out)
head(out)
t = apply(out,2,mean)
plot(c(1:10000),t,type = "l")
getwd()
setwd("/Users/DGravel/Dropbox/GravelMassolLeibold/ms_NatCom/revisions/2015-11-24")
pars = read.table("pars.txt")
nsim = nrow(pars)
load("res_niche.robj")
load("Results/res_niche.robj")
ls()
rm(out)
ls
ls()
load("Results/res_dispersal.robj")
ls()
dim(out)
glob = apply(res_disp[,resp_disp$disp_type=="global"],2,mean)
res_disp = out
glob = apply(res_disp[,resp_disp$disp_type=="global"],2,mean)
glob = apply(res_disp[,res_disp$disp_type=="global"],2,mean)
glob = apply(res_disp[,res_disp[,8]=="global"],2,mean)
glob
res_disp[,8]
glob = apply(res_disp[,pars_disp$disp_type=="global"],2,mean)
pars_disp = read.table("pars_dispersal.txt")
glob = apply(res_disp[,pars_disp$disp_type=="global"],2,mean)
glob
local = apply(res_disp[,pars_disp$disp_type=="linear"],2,mean)
rand = apply(res_disp[,pars_disp$disp_type=="random"],2,mean)
local
rand
range(out)
################################
# Collect the results#
################################
setwd("/Users/DGravel/Dropbox/GravelMassolLeibold/ms_NatCom/revisions/2015-11-24")#
pars_niche = read.table("pars_niche.txt")#
pars_disp = read.table("pars_dispersal.txt")#
#
load("Results/res_niche.robj")#
res_niche = out#
load("Results/res_dispersal.robj")#
res_disp = out#
#
glob = apply(res_disp[,pars_disp$disp_type=="global"],2,mean)#
local = apply(res_disp[,pars_disp$disp_type=="linear"],2,mean)#
rand = apply(res_disp[,pars_disp$disp_type=="random"],2,mean)#
S = 15#
N = 10#
nstep = 10000#
dmax = 1000#
dmin = 1e-4#
d = 10^seq(log(dmin,10),log(dmax,10),(log(dmax,10)-log(dmin,10))/(nstep-1))#
quartz(height = 3, width = 8)
plot(d,glob)
length(glob)
length(d)
pars_niche
head(pars_disp)
dim(out)
glob = apply(res_disp[pars_disp$disp_type=="global",],2,mean)
length(glob)
local = apply(res_disp[pars_disp$disp_type=="linear",],2,mean)
rand = apply(res_disp[pars_disp$disp_type=="random",],2,mean)
plot(d,glob)
plot(d,glob,log = "x")
plot(d,glob,log = "x",type = "l")
plot(d,local,log = "x",type = "l")
plot(d,global,type = "l", log = "x", xlab = "", ylab = "Largest eigenvalue",cex.axis=1.25,cex.lab=1.5,xlim=c(1e-3,1e3),lwd = 2,ylim = range(glob,local,random), xaxt = "n")
plot(d,glob,type = "l", log = "x", xlab = "", ylab = "Largest eigenvalue",cex.axis=1.25,cex.lab=1.5,xlim=c(1e-3,1e3),lwd = 2,ylim = range(glob,local,random), xaxt = "n")
plot(d,glob,type = "l", log = "x", xlab = "", ylab = "Largest eigenvalue",cex.axis=1.25,cex.lab=1.5,xlim=c(1e-3,1e3),lwd = 2,ylim = range(glob,local,rand), xaxt = "n")
range(glob)
range(local)
range(rand)
rand = apply(res_disp[pars_disp$disp_type=="random",],2,mean)
range(rand)
plot(d,glob,type = "l", log = "x", xlab = "", ylab = "Largest eigenvalue",cex.axis=1.25,cex.lab=1.5,xlim=c(1e-3,1e3),lwd = 2,ylim = range(glob,local), xaxt = "n")
lines(d,local,lwd=2,lty = 3)
lines(d,random,col = "red")
lines(d,rand,col = "red")
axis(side = 1, labels = FALSE)
mtext(text="A)",side=3,line=0.5,adj=-0.1,cex=1.25)
plot(d,glob,type = "l", log = "x", xlab = "",xlab = "Diffusion rate", ylab = "Largest eigenvalue",cex.axis=1.25,cex.lab=1.5,xlim=c(1e-3,1e3),lwd = 2,ylim = range(glob,local))
plot(d,glob,type = "l", log = "x", xlab = "Diffusion rate", ylab = "Largest eigenvalue",cex.axis=1.25,cex.lab=1.5,xlim=c(1e-3,1e3),lwd = 2,ylim = range(glob,local))
plot(d,glob,type = "l", log = "x", xlab = "Diffusion rate", ylab = "Largest eigenvalue",cex.axis=1.25,cex.lab=1.5,xlim=c(1e-3,1e3),lwd = 2,ylim = range(glob,local))
lines(d,local,lwd=2,lty = 3)
legend("topright",legend = c("Global","Local"),lty = c(1,3),bty = "n")
niche = apply(res_niche,2,mean)
plot(d,glob,type = "l", log = "x", xlab = "Diffusion rate", ylab = "Largest eigenvalue",cex.axis=1.25,cex.lab=1.5,xlim=c(1e-3,1e3),lwd = 2,ylim = range(glob,niche))
lines(d,niche,lwd=2,lty = 3)
legend("topright",legend = c("Random","Pred.-prey"),lty = c(1,3),bty = "n")
quartz(height = 3, width = 8)#
par(mar=c(5,6,2,1),mfcol = c(2,1))#
#
# PANEL A#
plot(d,glob,type = "l", log = "x", xlab = "Diffusion rate", ylab = "Largest eigenvalue",cex.axis=1.25,cex.lab=1.5,xlim=c(1e-3,1e3),lwd = 2,ylim = range(glob,local))#
lines(d,local,lwd=2,lty = 3)#
legend("topright",legend = c("Global","Local"),lty = c(1,3),bty = "n")#
mtext(text="A)",side=3,line=0.5,adj=-0.1,cex=1.25)#
#
# PANEL B#
niche = apply(res_niche,2,mean)#
plot(d,glob,type = "l", log = "x", xlab = "Diffusion rate", ylab = "Largest eigenvalue",cex.axis=1.25,cex.lab=1.5,xlim=c(1e-3,1e3),lwd = 2,ylim = range(glob,niche))#
lines(d,niche,lwd=2,lty = 3)#
legend("topright",legend = c("Random","Pred.-prey"),lty = c(1,3),bty = "n")#
mtext(text="A)",side=3,line=0.5,adj=-0.1,cex=1.25)
par(mar=c(5,6,2,1),mfcol = c(1,2))#
#
# PANEL A#
plot(d,glob,type = "l", log = "x", xlab = "Diffusion rate", ylab = "Largest eigenvalue",cex.axis=1.25,cex.lab=1.5,xlim=c(1e-3,1e3),lwd = 2,ylim = range(glob,local))#
lines(d,local,lwd=2,lty = 3)#
legend("topright",legend = c("Global","Local"),lty = c(1,3),bty = "n")#
mtext(text="A)",side=3,line=0.5,adj=-0.1,cex=1.25)#
#
# PANEL B#
niche = apply(res_niche,2,mean)#
plot(d,glob,type = "l", log = "x", xlab = "Diffusion rate", ylab = "Largest eigenvalue",cex.axis=1.25,cex.lab=1.5,xlim=c(1e-3,1e3),lwd = 2,ylim = range(glob,niche))#
lines(d,niche,lwd=2,lty = 3)#
legend("topright",legend = c("Random","Pred.-prey"),lty = c(1,3),bty = "n")#
mtext(text="A)",side=3,line=0.5,adj=-0.1,cex=1.25)
quartz(height = 5, width = 12)
par(mar=c(5,6,2,1),mfcol = c(1,2))
# PANEL A#
plot(d,glob,type = "l", log = "x", xlab = "Diffusion rate", ylab = "Largest eigenvalue",cex.axis=1.25,cex.lab=1.5,xlim=c(1e-3,1e3),lwd = 2,ylim = range(glob,local))#
lines(d,local,lwd=2,lty = 3)#
legend("topright",legend = c("Global","Local"),lty = c(1,3),bty = "n")#
mtext(text="A)",side=3,line=0.5,adj=-0.1,cex=1.25)#
#
# PANEL B#
niche = apply(res_niche,2,mean)#
plot(d,glob,type = "l", log = "x", xlab = "Diffusion rate", ylab = "Largest eigenvalue",cex.axis=1.25,cex.lab=1.5,xlim=c(1e-3,1e3),lwd = 2,ylim = range(glob,niche))#
lines(d,niche,lwd=2,lty = 3)#
legend("topright",legend = c("Random","Pred.-prey"),lty = c(1,3),bty = "n")#
mtext(text="A)",side=3,line=0.5,adj=-0.1,cex=1.25)
quartz(height = 3, width = 8)
par(mar=c(5,6,2,1),mfcol = c(1,2))#
#
# PANEL A#
plot(d,glob,type = "l", log = "x", xlab = "Diffusion rate", ylab = "Largest eigenvalue",cex.axis=1.25,cex.lab=1.5,xlim=c(1e-3,1e3),lwd = 2,ylim = range(glob,local))#
lines(d,local,lwd=2,lty = 3)#
legend("topright",legend = c("Global","Local"),lty = c(1,3),bty = "n")#
mtext(text="A)",side=3,line=0.5,adj=-0.1,cex=1.25)#
#
# PANEL B#
niche = apply(res_niche,2,mean)#
plot(d,glob,type = "l", log = "x", xlab = "Diffusion rate", ylab = "Largest eigenvalue",cex.axis=1.25,cex.lab=1.5,xlim=c(1e-3,1e3),lwd = 2,ylim = range(glob,niche))#
lines(d,niche,lwd=2,lty = 3)#
legend("topright",legend = c("Random","Pred.-prey"),lty = c(1,3),bty = "n")#
mtext(text="B)",side=3,line=0.5,adj=-0.1,cex=1.25)
# PANEL A#
plot(d,glob,type = "l", log = "x", xlab = "Diffusion rate", ylab = "Largest eigenvalue",cex.axis=1.25,cex.lab=1.5,xlim=c(1e-4,1e3),lwd = 2,ylim = range(glob,local))#
lines(d,local,lwd=2,lty = 3)#
legend("topright",legend = c("Global","Local"),lty = c(1,3),bty = "n")#
mtext(text="A)",side=3,line=0.5,adj=-0.1,cex=1.25)#
#
# PANEL B#
niche = apply(res_niche,2,mean)#
plot(d,glob,type = "l", log = "x", xlab = "Diffusion rate", ylab = "Largest eigenvalue",cex.axis=1.25,cex.lab=1.5,xlim=c(1e-4,1e3),lwd = 2,ylim = range(glob,niche))#
lines(d,niche,lwd=2,lty = 3)#
legend("topright",legend = c("Random","Pred.-prey"),lty = c(1,3),bty = "n")#
mtext(text="B)",side=3,line=0.5,adj=-0.1,cex=1.25)
quartz(height = 3, width = 8)#
par(mar=c(5,6,2,1),mfcol = c(1,2))#
#
# PANEL A#
plot(d,glob,type = "l", log = "x", xlab = "Diffusion rate", ylab = "Largest eigenvalue",cex.axis=1.25,cex.lab=1.5,lwd = 2,ylim = range(glob,local))#
lines(d,local,lwd=2,lty = 3)#
legend("topright",legend = c("Global","Local"),lty = c(1,3),bty = "n")#
mtext(text="A)",side=3,line=0.5,adj=-0.1,cex=1.25)#
#
# PANEL B#
niche = apply(res_niche,2,mean)#
plot(d,glob,type = "l", log = "x", xlab = "Diffusion rate", ylab = "Largest eigenvalue",cex.axis=1.25,cex.lab=1.5,lwd = 2,ylim = range(glob,niche))#
lines(d,niche,lwd=2,lty = 3)#
legend("topright",legend = c("Random","Pred.-prey"),lty = c(1,3),bty = "n")#
mtext(text="B)",side=3,line=0.5,adj=-0.1,cex=1.25)
par(mar=c(5,6,2,1),mfcol = c(1,2))#
#
# PANEL A#
plot(d,glob,type = "l", log = "x", xlab = "Diffusion rate", ylab = "Largest eigenvalue",cex.axis=1.25,cex.lab=1.5,lwd = 2,ylim = range(glob,local))#
lines(d,local,lwd=2,lty = 3)#
legend("topright",legend = c("Global","Local"),lty = c(1,3),bty = "n")#
mtext(text="A)",side=3,line=0.5,adj=-0.1,cex=1.25)#
#
# PANEL B#
par(mar=c(5,1,2,6)#
niche = apply(res_niche,2,mean)#
plot(d,glob,type = "l", log = "x", xlab = "Diffusion rate", ylab = "",cex.axis=1.25,cex.lab=1.5,lwd = 2,ylim = range(glob,niche))#
lines(d,niche,lwd=2,lty = 3)#
legend("topright",legend = c("Random","Pred.-prey"),lty = c(1,3),bty = "n")#
mtext(text="B)",side=3,line=0.5,adj=-0.1,cex=1.25)
quartz(height = 3.5, width = 8)#
par(mar=c(5,6,2,1),mfcol = c(1,2))#
#
# PANEL A#
plot(d,glob,type = "l", log = "x", xlab = "Diffusion rate", ylab = "Largest eigenvalue",cex.axis=1.25,cex.lab=1.5,lwd = 2,ylim = range(glob,local))#
lines(d,local,lwd=2,lty = 3)#
legend("topright",legend = c("Global","Local"),lty = c(1,3),bty = "n")#
mtext(text="A)",side=3,line=0.5,adj=-0.1,cex=1.25)#
#
# PANEL B#
par(mar=c(5,1,2,6)#
niche = apply(res_niche,2,mean)#
plot(d,glob,type = "l", log = "x", xlab = "Diffusion rate", ylab = "",cex.axis=1.25,cex.lab=1.5,lwd = 2,ylim = range(glob,niche))#
lines(d,niche,lwd=2,lty = 3)#
legend("topright",legend = c("Random","Pred.-prey"),lty = c(1,3),bty = "n")#
mtext(text="B)",side=3,line=0.5,adj=-0.1,cex=1.25)
par(mar=c(5,6,2,0),mfcol = c(1,2))#
#
# PANEL A#
plot(d,glob,type = "l", log = "x", xlab = "Diffusion rate", ylab = "Largest eigenvalue",cex.axis=1.25,cex.lab=1.5,lwd = 2,ylim = range(glob,local))#
lines(d,local,lwd=2,lty = 3)#
legend("topright",legend = c("Global","Local"),lty = c(1,3),bty = "n")#
mtext(text="A)",side=3,line=0.5,adj=-0.1,cex=1.25)#
#
# PANEL B#
par(mar=c(5,0,2,6)#
niche = apply(res_niche,2,mean)#
plot(d,glob,type = "l", log = "x", xlab = "Diffusion rate", ylab = "",cex.axis=1.25,cex.lab=1.5,lwd = 2,ylim = range(glob,niche))#
lines(d,niche,lwd=2,lty = 3)#
legend("topright",legend = c("Random","Pred.-prey"),lty = c(1,3),bty = "n")#
mtext(text="B)",side=3,line=0.5,adj=-0.1,cex=1.25)
?par
par(mar=c(5,6,2,0),mfcol = c(1,2))#
#
# PANEL A#
plot(d,glob,type = "l", log = "x", xlab = "Diffusion rate", ylab = "Largest eigenvalue",cex.axis=1.25,cex.lab=1.5,lwd = 2,ylim = range(glob,local))#
lines(d,local,lwd=2,lty = 3)#
legend("topright",legend = c("Global","Local"),lty = c(1,3),bty = "n")#
mtext(text="A)",side=3,line=0.5,adj=-0.1,cex=1.25)#
#
# PANEL B#
par(mar=c(5,0,2,6)#
niche = apply(res_niche,2,mean)#
plot(d,glob,type = "l", log = "x", xlab = "Diffusion rate", ylab = "",cex.axis=1.25,cex.lab=1.5,lwd = 2,ylim = range(glob,niche),yaxt="n")#
lines(d,niche,lwd=2,lty = 3)#
axis(side = 2, labels = FALSE)#
legend("topright",legend = c("Random","Pred.-prey"),lty = c(1,3),bty = "n")#
mtext(text="B)",side=3,line=0.5,adj=-0.1,cex=1.25)
par(mar=c(5,6,2,0),mfcol = c(1,2))#
#
# PANEL A#
plot(d,glob,type = "l", log = "x", xlab = "Diffusion rate", ylab = "Largest eigenvalue",cex.axis=1.25,cex.lab=1.5,lwd = 2,ylim = range(glob,local))#
lines(d,local,lwd=2,lty = 3)#
legend("topright",legend = c("Global","Local"),lty = c(1,3),bty = "n")#
mtext(text="A)",side=3,line=0.5,adj=-0.1,cex=1.25)#
#
# PANEL B#
par(mar=c(5,0,2,6))#
niche = apply(res_niche,2,mean)#
plot(d,glob,type = "l", log = "x", xlab = "Diffusion rate", ylab = "",cex.axis=1.25,cex.lab=1.5,lwd = 2,ylim = range(glob,niche),yaxt="n")#
lines(d,niche,lwd=2,lty = 3)#
axis(side = 2, labels = FALSE)#
legend("topright",legend = c("Random","Pred.-prey"),lty = c(1,3),bty = "n")#
mtext(text="B)",side=3,line=0.5,adj=-0.1,cex=1.25)
par(mar=c(5,6,2,1),mfcol = c(1,2))#
#
# PANEL A#
plot(d,glob,type = "l", log = "x", xlab = "Diffusion rate", ylab = "Largest eigenvalue",cex.axis=1.25,cex.lab=1.5,lwd = 2,ylim = range(glob,local))#
lines(d,local,lwd=2,lty = 3)#
legend("topright",legend = c("Global","Local"),lty = c(1,3),bty = "n")#
mtext(text="A)",side=3,line=0.5,adj=-0.1,cex=1.25)#
#
# PANEL B#
par(mar=c(5,1,2,6))#
niche = apply(res_niche,2,mean)#
plot(d,glob,type = "l", log = "x", xlab = "Diffusion rate", ylab = "",cex.axis=1.25,cex.lab=1.5,lwd = 2,ylim = range(glob,niche),yaxt="n")#
lines(d,niche,lwd=2,lty = 3)#
axis(side = 2, labels = FALSE)#
legend("topright",legend = c("Random","Pred.-prey"),lty = c(1,3),bty = "n")#
mtext(text="B)",side=3,line=0.5,adj=-0.1,cex=1.25)
par(mar=c(5,6,2,0),mfcol = c(1,2))#
#
# PANEL A#
plot(d,glob,type = "l", log = "x", xlab = "Diffusion rate", ylab = "Largest eigenvalue",cex.axis=1.25,cex.lab=1.5,lwd = 2,ylim = range(glob,local))#
lines(d,local,lwd=2,lty = 3)#
legend("topright",legend = c("Global","Local"),lty = c(1,3),bty = "n")#
mtext(text="A)",side=3,line=0.5,adj=-0.1,cex=1.25)#
#
# PANEL B#
par(mar=c(5,3,2,3))#
niche = apply(res_niche,2,mean)#
plot(d,glob,type = "l", log = "x", xlab = "Diffusion rate", ylab = "",cex.axis=1.25,cex.lab=1.5,lwd = 2,ylim = range(glob,niche),yaxt="n")#
lines(d,niche,lwd=2,lty = 3)#
axis(side = 2, labels = FALSE)#
legend("topright",legend = c("Random","Pred.-prey"),lty = c(1,3),bty = "n")#
mtext(text="B)",side=3,line=0.5,adj=-0.1,cex=1.25)
quartz(height = 3.5, width = 9)#
par(mar=c(5,6,2,0),mfcol = c(1,2))#
#
# PANEL A#
plot(d,glob,type = "l", log = "x", xlab = "Diffusion rate", ylab = "Largest eigenvalue",cex.axis=1.25,cex.lab=1.5,lwd = 2,ylim = range(glob,local))#
lines(d,local,lwd=2,lty = 3)#
legend("topright",legend = c("Global","Local"),lty = c(1,3),bty = "n")#
mtext(text="A)",side=3,line=0.5,adj=-0.1,cex=1.25)#
#
# PANEL B#
par(mar=c(5,3,2,3))#
niche = apply(res_niche,2,mean)#
plot(d,glob,type = "l", log = "x", xlab = "Diffusion rate", ylab = "",cex.axis=1.25,cex.lab=1.5,lwd = 2,ylim = range(glob,niche),yaxt="n")#
lines(d,niche,lwd=2,lty = 3)#
axis(side = 2, labels = FALSE)#
legend("topright",legend = c("Random","Pred.-prey"),lty = c(1,3),bty = "n")#
mtext(text="B)",side=3,line=0.5,adj=-0.1,cex=1.25)
dev.copy2pdf(file = "Fig4.pdf")
2015-1967
# PARAMETERS#
# u_max#
# u_0#
# u_1#
# e_max#
# e_0neg#
# e_1neg#
# e_0pos#
# e_1pos#
# a_u#
# a_eneg#
# a_epos#
# av_r: average range #
# beta_r$ : shape parameter for the range#
# gam_0: intercept of the n-o relationship#
# gam_1: slope of the n-o relationship#
# var_o: variance in the niche optimum around the expected niche optimum#
# var_n: inheritance parameter (variance of the niche around the ancestor trait)#
#
setwd("/Users/DGravel/Documents/Manuscripts/Inprep/ms_diversification_networks")#
rm(list = ls())#
source("functions.R")#
#
pars = list()#
pars$u_max = 0.2 # mutation probability#
pars$u_0 = 1  # 1 for predation & mutualism, 0 for competition#
pars$u_1 = -1 # -1 for predation & mutualism, 1 for competition#
pars$e_0neg = 0.15 # asymptotic extinction probability with infinite negative interactions#
pars$e_1neg = -pars$e_0neg  # Extinction probability with absence of interactions#
pars$e_0pos = 0.05 # asymptotic extinction probability with infinite positive interactions#
pars$e_1pos = 1 - pars$e_0pos # 1 - e0#
pars$a_u = 1 # shape of the exponential decay of the colonization - interaction relationship    #
pars$a_eneg = 0.05 # shape of the exponential decay of the negative extinction - interaction relationship #
pars$a_epos = 1  # shape of the exponential decay of the positive extinction - interaction relationship #
pars$av_r = 0.2 # range of the niche#
pars$beta_n = 1 # parameter of the beta distribution #
pars$int =  2 # 0 for competition, 1 for mutualism, 2 for predation#
pars$Sbasal = 25 # number of basal species#
#
###############################
# Run the model#
# attach(pars)#
seed = 1#
nsteps =  100#
# detach()#
test = sim_model(seed = seed, pars, nsteps = nsteps)#
#
###############################
# Plot diversification dynamics#
pres = test$pres#
traits = test$traits#
Stot = ncol(pres)#
S = apply(pres,1,sum)#
plot(c(1:nsteps),S,type = "l", xlab = "Time", ylab = "Species richness")#
#
###############################
# Plot the trait distribution over time#
pres = test$pres#
traits = test$traits#
#
Time = c(1:nrow(pres))#
#
plot(Time[pres[,1]==1],rep(traits[1,3],sum(pres[,1])),xlim = c(1,nrow(pres)),ylim = c(0,1), pch = 19, cex = 0.3, xlab = "Time", ylab = "Niche position")#
for(i in 1:Stot)    points(Time[pres[,i]==1],rep(traits[i,3],sum(pres[,i])),cex = 0.3,pch = 19)#
#
###############################
# Number of speciation and extinction events#
t0 = pres[1:(nsteps-1),]#
t1 = pres[2:nsteps,] #
spec_mat = pres[1:(nsteps-1),]*0#
ext_mat = pres[1:(nsteps-1),]*0#
spec_mat[t1-t0==1] = 1 #
ext_mat[t1-t0==-1] = 1#
spec = apply(spec_mat,1,sum)#
ext = apply(ext_mat, 1, sum)#
#
plot(Time[2:nsteps], spec, type = "l", ylim = range(spec,ext),xlab = "Time", ylab = "Rate", col = "darkblue")#
lines(Time[2:nsteps], ext, col = "darkred")#
legend("topleft",bty = "n", legend = c("Speciation", "Extinction"), lty = 1, col = c("darkblue","darkred"))#
###############################
# Diversification-richness dependence#
plot(S[2:nsteps],spec, xlab = "Species richness", ylab = "Rate", pch = 21, bg = "darkblue")#
#
points(S[2:nsteps],ext, pch = 21, bg = "darkred")
plot(Time[2:nsteps], spec, type = "l", ylim = range(spec,ext),xlab = "Time", ylab = "Rate", col = "darkblue")
lines(Time[2:nsteps], ext, col = "darkred")
